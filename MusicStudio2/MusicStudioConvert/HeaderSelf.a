; A self running demo.

!source "stdlib/stdlib.a"
!to "t.prg", cbm
!sal
!sl "t.map"
!svl "t.lbl"
!cpu 6510
!ct pet

;MusicPlayer_DebugBorder = 1

!source "stdlib/BASICEntry80d.a"

*=BASICEntry
	lda #ProcessorPortDefault
	jsr InitialiseMachine

	+InitKERNALStringDisplay_AXY
	+MACRODisableCursorFlash_A

	jsr DisplayScreenText


	sei
	lda #kStartSong-1
	jsr MusicPlayerInit
	
	lda #$7f
	sta CIA1InterruptControl
	lda #$ff
	sta VIC2Raster
	lda #1
	sta VIC2InteruptControl
	lda #<TheIRQ
	sta IRQServiceRoutineLo
	lda #>TheIRQ
	sta IRQServiceRoutineHi

	+SetDefaultScreenLowerCase_A

	; Waste a few frames to give the reset SID time to settle down
	ldx #50
.l3
	+MACROWaitForTheLastScan_A
	+MACROWaitForTheLastScanPlus1_A
	dex
	bne .l3

	+MACROAckAllIRQs_A
	cli

	jmp Mainline

!source "t.a"

!source "stdlib/PETSCII.a"

!source "stdlib/Initialise.a"

text
!by CHR_Clear
!by CHR_LightRed
!tx "Playing "
!by CHR_LightGreen
!tx "Music Studio 2.2"
!by CHR_LightRed
!tx " music"
!by CHR_Return
!by CHR_Return
!source "t3.a"
!by CHR_Return
!by CHR_LightBlue
!tx "Raster time used: 00 lines"
!by CHR_Return
!tx "Average: 00 lines"
!by CHR_Return
!by CHR_Blue
!tx "Time: 00:00:00"
!by CHR_Return
!by CHR_Return
!by CHR_Grey
!tx "Preferred SID Type = "
!by CHR_Green
!ifdef kEditorSIDIs6581 {
!tx "6581"
} else {
!tx "8580"
}
!ifdef SoundEffectsActive {
!by CHR_Return
!by CHR_Return
!by CHR_LightRed
!tx "Press the letter keys to play different sound effects."
}

!by 0

.valDiv10
	!for .table1,50 {!by <((.table1-1) / 10) }
.valMod10
	!by 0,1,2,3,4,5,6,7,8,9
	!by 0,1,2,3,4,5,6,7,8,9
	!by 0,1,2,3,4,5,6,7,8,9
	!by 0,1,2,3,4,5,6,7,8,9
	!by 0,1,2,3,4,5,6,7,8,9


DisplayScreenText
	lda #<text
	ldy #>text
	jsr BASICTextPrint
	rts


.movingAverageShift = 6
.movingAverageSize = (1 << .movingAverageShift)
.movingAverage !fill .movingAverageSize , 0
Mainline
.l1
	+MACROWaitForTheLastScan_A
.smidx	ldx #0
	lda .rasterTime
	sta .movingAverage,x

	tay
	lda .valDiv10,y
	clc
	adc #'0'
	sta SCREENRAM + (6*40) + 18
	lda .valMod10,y
	clc
	adc #'0'
	sta SCREENRAM + (6*40) + 18 + 1

	; Populate the rest of the table gradually over time
	inc .smidx+1
	lda .smidx+1
	and #.movingAverageSize-1
	sta .smidx+1

	; Calculate the moving average
	ldx #.movingAverageSize-1
	lda #0
	sta $19
	sta $1a
.ma1
	lda $19
	clc
	adc .movingAverage,x
	sta $19
	bcc .ma2
	inc $1a
.ma2
	dex
	bpl .ma1

	; Divide the sum
!for .i , .movingAverageShift {
	lsr $1a
	ror $19
}

	; Render
	ldy $19
	lda .valDiv10,y
	clc
	adc #'0'
	sta SCREENRAM + (7*40) + 9
	lda .valMod10,y
	clc
	adc #'0'
	sta SCREENRAM + (7*40) + 9 + 1


!macro MAddNumber .pos , .max {
	clc
	adc .pos
	cmp #.max+1
	bcs .no1
	sta .pos
	lda #0	; No carry!
	jmp .no2
.no1
	sec
	sbc #(.max - '0')+1
	sta .pos
	lda #1	; Carry!
.no2
}

	lda #2
	+MAddNumber SCREENRAM + (8*40) + 13 , '9'
	+MAddNumber SCREENRAM + (8*40) + 12 , '9'
	beq .noTimeCarry1

	+MAddNumber SCREENRAM + (8*40) + 10 , '9'
	beq .noTimeCarry1
	+MAddNumber SCREENRAM + (8*40) + 9 , '5'
	beq .noTimeCarry1

	+MAddNumber SCREENRAM + (8*40) + 7 , '9'
	beq .noTimeCarry1
	+MAddNumber SCREENRAM + (8*40) + 6 , '9'
	beq .noTimeCarry1

.noTimeCarry1

!ifdef SoundEffectsActive {
	lda ZPCurrentKeyPressed
	cmp #$40
	beq .nothingPressed
	; Debounce check
	ldy .anyPreviousKey
	bne .onothingPressed
	ldy #1
	sty .anyPreviousKey
	lsr
	lsr
	and #3
	tay
	lda ZPCurrentKeyPressed
	lsr
	and #3
	tax
	cpx #2
	bcc .l2
	ldx #2
.l2
	iny
	lda #48
	jsr MusicPlayerPlaySFX
	jmp .onothingPressed
.nothingPressed
	lda #0
	sta .anyPreviousKey
.onothingPressed
}

	jmp .l1

!ifdef SoundEffectsActive {
.anyPreviousKey !by 0
}

TheIRQ
	; Using the KERNAL no need to save registers
	; Wait for the 0 raster line
.i1
	lda VIC2Raster
	bne .i1

	ldx #10
.l2a
	dex
	bne .l2a
	nop

	lda #VIC2Colour_Grey
	sta VIC2BorderColour
	jsr MusicPlayerPlay

	; Adjust for stable raster overhead
	ldx VIC2Raster
	dex
	stx .rasterTime

!ifdef MusicPlayer_DebugBorder { } else {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	+MACROAckRasterIRQ_A
	jmp DefaultIRQServiceRoutine
.rasterTime !by 0
